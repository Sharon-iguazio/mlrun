# Example MLRun Kubernetes Configuration
# TODO: 
# - Replace all `<...>` placeholders.
# - Add a volume for persisting data (see `volumeMounts` and `volumes`).
# - For the Iguazio Data Science Platform, env V3IO_USERNAME and volumes subPath
#   should be set to a username with MLRun admin privileges (default: "admin").
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlrun-api
  labels:
    app: mlrun-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlrun-api
  template:
    metadata:
      labels:
        app: mlrun-api
    spec:
      containers:
      - name: mlrun-api
        image: mlrun/mlrun-api:latest
        imagePullPolicy: Always
        env:
        - name: MLRUN_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MLRUN_LOG_LEVEL
          value: ERROR
        - name: MLRUN_HTTPDB__DB_TYPE
          value: filerundb
        - name: MLRUN_HTTPDB__DIRPATH
          value: "/mlrun/db"
        - name: DEFAULT_DOCKER_REGISTRY
          value: "<default Docker registry URL>"
        - name: V3IO_ACCESS_KEY
          value: <access key>
        - name: V3IO_USERNAME
          value: admin
        ports:
        - containerPort: 8080
        command: ["python", "-m", "mlrun", "db"]
        args: []
# TODO: Uncomment the following to add an Iguazio Data Science Platform
# persistent-data volume using the v3io mount. Replace `<access key>` with a
# platform access key, and if necessary, replace "admin" in `subPath` with the
# name of an admin user for the MLRun service
# configured also in template.spec.containers.env):
#       volumeMounts:
#       - mountPath: /mlrun/db
#         name: fs
#     volumes:
#     - flexVolume:
#         driver: v3io/fuse
#         options:
#           accessKey: <access key>
#           container: users
#           subPath: /admin
#       name: fs
      serviceAccountName: mlrun-api
---
kind: Service
apiVersion: v1
metadata:
  name: mlrun-api
spec:
  type: NodePort
  selector:
    app: mlrun-api
  ports:
  - protocol: TCP
    nodePort: 30080
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlrun-ui
  labels:
    app: mlrun-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlrun-ui
  template:
    metadata:
      labels:
        app: mlrun-ui
    spec:
      containers:
      - name: mlrun-ui
        image:  quay.io/iguazio/mlrun-ui:latest
        imagePullPolicy: Always
        env:
        - name: MLRUN_API_PROXY_URL
          value: http://mlrun-api:8080
        ports:
        - containerPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: mlrun-ui
spec:
  type: NodePort
  selector:
    app: mlrun-ui
  ports:
  - protocol: TCP
    nodePort: 30088
    port: 80
    targetPort: 80
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mlrun-api
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mlrun-api-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - pods/log
  - services
  verbs:
  - '*'
- apiGroups:
  - kubeflow.org
  resources:
  - mpijobs
  verbs:
  - '*'
- apiGroups:
  - sparkoperator.k8s.io
  resources:
  - sparkapplications
  - scheduledsparkapplications
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mlrun-api-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mlrun-api-role
subjects:
- kind: ServiceAccount
  name: mlrun-api
